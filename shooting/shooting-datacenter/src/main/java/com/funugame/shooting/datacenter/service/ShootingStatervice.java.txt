package com.funugame.shooting.datacenter.service;

import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;

import com.funugame.shooting.api.IShootingStatService;
import com.funugame.shooting.api.daoentity.ShootingStat;
import com.funugame.shooting.dao.ShootingStatMapper;
import com.lzx.framework.web.springjson.beans.ResponseBase;

@Service("shootingStatervice_RMI")
public class ShootingStatervice implements IShootingStatService {

    @Autowired
    private ShootingStatMapper shootingStatMapper;
    private ResponseBase base = new ResponseBase();

    private IShootingStatService self;

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    public ShootingStatervice() {
	base.setCode(ResponseBase.SUCCESS);
    }

    @Override
    public ResponseBase submitGameResult(Integer cid, Integer result) {
	Date today = new Date();
	return this.self.submitGameResult(cid, sdf.format(today), result);
    }

    @Caching(evict = { @CacheEvict(value = "shootingStatCache", key = "#cid+#todays") })
    @Override
    public ResponseBase submitGameResult(Integer cid, String todays, Integer result) {
	 int change=0;
	try {
	    if (result == 1) {
		change=shootingStatMapper.addWinCount(cid,todays);
	    } else {
		change=shootingStatMapper.addFailCount(cid, todays);
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	    change=0;
	}
	if(change==0) {
	    ShootingStat stat = new ShootingStat();
	    stat.setCid(cid);
	    stat.setSdate(todays);
	    if (result == 1) {
		stat.setWincount(1);
		stat.setFailcount(0);
	    } else {
		stat.setWincount(0);
		stat.setFailcount(1);
	    }
	    shootingStatMapper.insert(stat);
	}
	return base;
    }

    @Override
    public ShootingStat getTodayStat(Integer cid) {
	Date today = new Date();
	return self.getTodayStat(cid, sdf.format(today));
    }

    @Cacheable(value = "shootingStatCache", key = "#cid+#todays")
    public ShootingStat getTodayStat(Integer cid, String todays) {

	ShootingStat stat = shootingStatMapper.selectOne(cid, todays);
	if (stat == null) {
	    stat = new ShootingStat();
	    stat.setCid(cid);
	    stat.setWincount(0);
	    stat.setFailcount(0);
	}
	return stat;
    }

    public IShootingStatService getSelf() {
	return self;
    }

    public void setSelf(IShootingStatService self) {
	this.self = self;
    }

}
