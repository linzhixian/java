package com.funugame.gameadmin.web.control;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.funugame.gameadmin.web.gameadmin.DataGridResult;
import com.funugame.parkour.api.IUserService;
import com.funugame.parkour.api.daoentity.UserInfo;
import com.funugame.parkour.api.daoentity.UserProp;
import com.lzx.framework.web.springjson.beans.ResponseBase;

@Controller
@RequestMapping("/")
public class UploadController {
    @Autowired
    private IUserService userService;

    @RequestMapping(value = "/submit", method = RequestMethod.POST)
    @ResponseBody
    public DataGridResult submitProp(HttpServletRequest request) throws IOException {
	Map<Integer, UserProp> fileBuffer = (Map<Integer, UserProp>) request.getSession().getAttribute("propuploadfiles");
	List<UserProp> list = new ArrayList<UserProp>();
	List<UserProp> proplist = new ArrayList<UserProp>();
	List<Integer> errorList = new ArrayList<Integer>();
	DataGridResult r = new DataGridResult();
	if (fileBuffer==null||fileBuffer.size()==0) {
	    r.setCode(ResponseBase.NO_EXIST); 
	    return r;
	}
	Iterator<Integer> keysIterator = fileBuffer.keySet().iterator();
	while (keysIterator.hasNext()) {
	    int uid = keysIterator.next();
	    UserInfo ui = new UserInfo();
	    ui.setId(uid);
	    ui = userService.selectUserInfoId(ui);
	    if (ui == null) {
		errorList.add(uid);
	    }
	}
	if (errorList.size() == 0) {
	    Iterator<Integer> propiterator = fileBuffer.keySet().iterator();
	    while (propiterator.hasNext()) {
		int uid = propiterator.next();
		UserProp prop = fileBuffer.get(uid);
		proplist.add(prop);
		Integer propnum = prop.getNum();
		try {
		    if (prop != null) {
			list = userService.selectGamePropList(prop);
		    }
		    if (list.size() > 0) {
			prop = list.get(0);
			propnum += prop.getNum();
			prop.setNum(propnum);
			userService.updatePropList(prop);
		    } else if (list.size() == 0) {
			userService.insertPropList(prop);
		    }
		} catch (Exception e) {
		    e.printStackTrace();
		}
	    }
	    r = new DataGridResult(proplist.size(), proplist);
	    r.setCode(ResponseBase.SUCCESS);
	    request.getSession().removeAttribute("propuploadfiles");
	} else {
	    r = new DataGridResult(errorList.size(), errorList);
	    r.setCode(ResponseBase.EXIST);
	    request.getSession().removeAttribute("propuploadfiles");
	}
	return r;
    }

    @RequestMapping(value = "/file", method = RequestMethod.POST)
    @ResponseBody
    public ResponseBase uploadfile(@RequestParam MultipartFile[] myfiles, HttpServletRequest request) throws IOException {
	ResponseBase r = new ResponseBase();
	Map<Integer, UserProp> allMap = new HashMap<Integer, UserProp>();
	// 如果只是上传一个文件，则只需要MultipartFile类型接收文件即可，而且无需显式指定@RequestParam注解
	// 如果想上传多个文件，那么这里就要用MultipartFile[]类型来接收文件，并且还要指定@RequestParam注解
	// 并且上传多个文件时，前台表单中的所有<input
	// type="file"/>的name都应该是myfiles，否则参数里的myfiles无法获取到所有上传的文件
	try {
	    for (MultipartFile myfile : myfiles) {
		if (myfile.isEmpty()) {
//		    System.out.println("文件未上传");
		    r.setCode(ResponseBase.NO_EXIST); //文件空
		} else if(!myfile.getContentType().equals("text/plain")){
		    r.setCode(ResponseBase.UNKONW_ERROR);  //文件类型不合法
		}else {
//		     System.out.println("文件长度: " + myfile.getSize());
//		     System.out.println("文件类型: " + myfile.getContentType());
//		     System.out.println("文件名称: " + myfile.getName());
//		     System.out.println("文件原名: " +
//		     myfile.getOriginalFilename());
		    // System.out.println("========================================");
		    // 如果用的是Tomcat服务器，则文件会上传到\\%TOMCAT_HOME%\\webapps\\YourWebProject\\WEB-INF\\upload\\文件夹中
//		    String realPath = request.getSession().getServletContext().getRealPath("/WEB-INF/upload");
		    // 这里不必处理IO流关闭的问题，因为FileUtils.copyInputStreamToFile()方法内部会自动把用到的IO流关掉，我是看它的源码才知道的
		    // FileUtils.copyInputStreamToFile(myfile.getInputStream(),
		    InputStream is = myfile.getInputStream();
		    byte[] abyte0 = new byte[is.available()];
		    is.read(abyte0);
		    String str = new String(abyte0, "UTF-8");
		    is.close();
		    Map<Integer, UserProp> oneMap = parser(myfile.getOriginalFilename(), str);
		    if (oneMap != null){
			allMap.putAll(oneMap);
			r.setCode(ResponseBase.SUCCESS);
		    }else {
			r.setCode(ResponseBase.WRONG_PARAM);  //用户数据空
		    }
		}
	    }
	    request.getSession().setAttribute("propuploadfiles", allMap);
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return r;
    }

    private Map<Integer, UserProp> parser(String fileName, String c) throws Exception {
	Map<Integer, UserProp> allMap = new HashMap<Integer, UserProp>();
	String as[] = org.apache.commons.lang.StringUtils.splitByWholeSeparatorPreserveAllTokens(c, "\r\n");
	if (as.length < 3) {
	    return null;
	}
	// uid,propid,num
	for (int j = 3; j < as.length; j++) {
	    String data = as[j].trim();
	    String[] values = org.apache.commons.lang.StringUtils.splitByWholeSeparatorPreserveAllTokens(data, "\t");
	    if (values.length == 0) {
		continue;
	    }
	    Integer uid = Integer.parseInt(values[0]);
	    allMap.put(uid, new UserProp(Integer.parseInt(values[0]), Integer.parseInt(values[1]), Integer.parseInt(values[2])));
	}
	return allMap;
    }
}