package com.funugame.gameadmin.web.control;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.funugame.gameadmin.web.RequestJson;
import com.funugame.gameadmin.web.command.ManagerCommands;
import com.funugame.gameadmin.web.daoentity.AdminUser;
import com.lzx.framework.web.springjson.beans.ResponseBase;
import com.lzx.framework.web.springjson.controller.CenterController;
import com.lzx.framework.web.springjson.user.HttpUser;
import com.lzx.framework.web.springjson.user.Permission;

@Controller
@Lazy
@RequestMapping(value = "/controller")
public class WebCenterController extends CenterController {

    @Autowired
    private ManagerCommands managerCommands;

    @RequestMapping(value = "test", method = RequestMethod.POST)
    @ResponseBody
    public String test(@RequestBody RequestJson requestJson, HttpSession httpSession) {
	return "ok";
    }
    @RequestMapping(value = "", method = RequestMethod.POST)
    @ResponseBody
    public Map<String, Object> controller(@RequestBody RequestJson requestJson, HttpSession httpSession) {
	if (requestJson.getCheckLogin() != null) {
	    return checkLogin(httpSession);
	}
	if (requestJson.getLogin() != null) {
	    return login(requestJson, httpSession);
	}
	if (httpSession.getAttribute("user") == null) {
	    return checkLogin(httpSession);
	}
	return super.controller(requestJson,(HttpUser)httpSession.getAttribute("user"));
    }

    private Map<String, Object> login(RequestJson requestJson, HttpSession httpSession) {
	Map<String, Object> output = new HashMap<String, Object>();
	AdminUser user = managerCommands.login(requestJson.getLogin());
	if (user != null) {
	    HttpUser myuser=new HttpUser();
	    myuser.setAttachmentObject(user);
	    Permission ps=new Permission();
	    ps.setType(user.getType());
	    myuser.setPermission(ps);
	    myuser.loadPermission(user.getPermissionArray());
	    httpSession.setAttribute("user", myuser);
	    output.put("code", ResponseBase.SUCCESS);
	    output.put("permission", user.getPermissionArray());
	} else {
	    output.put("code", ResponseBase.UNKONW_ERROR);
	}
	return output;
    }

    private Map<String, Object> checkLogin(HttpSession httpSession) {
	Map<String, Object> output = new HashMap<String, Object>();
	AdminUser user=null;
	if ((HttpUser)httpSession.getAttribute("user")!=null) {
	    user=(AdminUser) ((HttpUser)httpSession.getAttribute("user")).getAttachmentObject();
	}else {
	    output.put("code", ResponseBase.UNKONW_ERROR);
	}
	if (user == null) {
	    output.put("code", ResponseBase.UNKONW_ERROR);
	} else {
	    output.put("code", ResponseBase.SUCCESS);
	    output.put("type", user.getType());
	    output.put("permission", user.getPermissionArray());
	}
	return output;
    }

    @Override
    protected boolean checkSign(Integer uid, String sign, String source) {
	return false;
    }

    @Override
    protected Class getRequestJsonClass() {
	return RequestJson.class;
    }

}
