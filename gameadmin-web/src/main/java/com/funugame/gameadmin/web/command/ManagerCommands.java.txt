package com.funugame.gameadmin.web.command;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import com.funugame.gameadmin.web.configbeans.PermissionConfig;
import com.funugame.gameadmin.web.dao.UserMapper;
import com.funugame.gameadmin.web.daoentity.AdminUser;
import com.funugame.gameadmin.web.gameadmin.DataGridResult;
import com.funugame.gameadmin.web.jsonbeans.ID;
import com.funugame.gameadmin.web.jsonbeans.ManagerUserQueryResult;
import com.funugame.gameadmin.web.jsonbeans.MenuTree;
import com.funugame.parkour.api.IUserService;
import com.lzx.framework.utils.StringUtil;
import com.lzx.framework.web.springjson.annotation.WebAction;
import com.lzx.framework.web.springjson.annotation.WebCommand;
import com.lzx.framework.web.springjson.beans.ResponseBase;
import com.lzx.framework.web.springjson.user.HttpUser;

@WebCommand
@Service
@Lazy
public class ManagerCommands {

    @Autowired
    private UserMapper userMapper;
    @Autowired
    private IUserService userService;

    List<Map<String, Object>> parentList = new ArrayList<Map<String, Object>>();

    public AdminUser login(AdminUser login) {
	return userMapper.login(login.getName(), login.getPassword());
    }

    private void createTree(List<MenuTree> list, int pId) {
	for (int i = 0; i < list.size(); i++) {
	    Map<String, Object> map = null;
	    MenuTree tt = (MenuTree) list.get(i);
	    if (tt.getParent() == pId) {
		map = new HashMap<String, Object>();
		map.put("id", list.get(i).getId());
		map.put("text", list.get(i).getText());
		map.put("state", list.get(i).getState());
		map.put("children", createChildren(list, tt.getId()));
		if (list.get(i).getChecked() != null && list.get(i).getChecked().equals("true")) {
		    map.put("checked", list.get(i).getChecked());
		}
	    }
	    if (map != null)
		parentList.add(map);
	}
    }

    private List<Map<String, Object>> createChildren(List<MenuTree> list, int pId) {
	List<Map<String, Object>> childList = new ArrayList<Map<String, Object>>();
	for (int j = 0; j < list.size(); j++) {
	    Map<String, Object> map = null;
	    MenuTree treeChild = (MenuTree) list.get(j);
	    if (pId == treeChild.getParent()) {
		map = new HashMap<String, Object>();
		map.put("id", list.get(j).getId());
		map.put("text", list.get(j).getText());
		if (list.get(j).getChecked() != null && list.get(j).getChecked().equals("true")) {
		    map.put("checked", list.get(j).getChecked());
		}
		map.put("children", createChildren(list, treeChild.getId()));
	    }
	    if (map != null)
		childList.add(map);
	}
	return childList;
    }

    @WebAction(name = "modifyMenuTree")
    public DataGridResult modifyMenuTree(AdminUser au, HttpUser httpUser) {
	DataGridResult r = new DataGridResult();
	List<MenuTree> list = new ArrayList<MenuTree>();
	au = userMapper.selectOneByID(au.getId());
	String permission2 = au.getPermission();
	permission2 = permission2.replace("\u005B", "");
	permission2 = permission2.replace("\u005D", "");
	permission2 = permission2.replace("\"", "");
	String[] stringArr = permission2.split(",");
	List<String> tempList = Arrays.asList(stringArr);
	AdminUser aUser = (AdminUser) httpUser.getAttachmentObject();
	String permission1 = aUser.getPermission();
	permission1 = permission1.replace("\u005B", "");
	permission1 = permission1.replace("\u005D", "");
	permission1 = permission1.replace("\"", "");
	String[] stringArr1 = permission1.split(",");
	List<String> tempList1 = Arrays.asList(stringArr1);
	for (int i = 1; i <= PermissionConfig.ALL.size(); i++) {
	    PermissionConfig pc = PermissionConfig.getById(i);
	    MenuTree mTree = new MenuTree();
	    if (tempList1.contains(pc.getKey())) {
		mTree.setId(i);
		mTree.setText(pc.getName());
		mTree.setState("open");
		mTree.setParent(pc.getParent());
		if (au.getId() != null && au.getId() != 1) {
		    if (tempList.contains(pc.getKey())) {
			mTree.setChecked("true");
			if (pc.getKey().equals("menu_gameadmin") || pc.getKey().equals("menu_manager")) {
			    mTree.setChecked(null);
			}
		    }
		}
	    }
	    list.add(mTree);
	    mTree = new MenuTree();
	    pc = new PermissionConfig();
	}
	createTree(list, 0);
	r = new DataGridResult(parentList.size(), parentList);
	parentList = new ArrayList<Map<String, Object>>();
	return r;
    }

    @WebAction(name = "queryManagerUser")
    public ManagerUserQueryResult queryManagerUser(Object request, HttpUser httpUser) {
	AdminUser aUser = (AdminUser) httpUser.getAttachmentObject();
	List<AdminUser> list = userMapper.selectList(aUser);
	ManagerUserQueryResult r = new ManagerUserQueryResult();
	r.setRows(list);
	return r;
    }

    @WebAction(name = "deleteAdminUser")
    public ResponseBase deleteAdminUser(ID request) {
	ResponseBase b = new ResponseBase();
	userMapper.delete(request.getId());
	b.setCode(ResponseBase.SUCCESS);
	return b;
    }

    @WebAction(name = "addAdminUser")
    public ResponseBase addAdminUser(AdminUser user, HttpUser httpUser) {
	ResponseBase b = new ResponseBase();
	AdminUser aUser = (AdminUser) httpUser.getAttachmentObject();
	try {
	    if (!StringUtil.isEmpty(user.getName()) && !StringUtil.isEmpty(user.getName())) {
		if (userMapper.selectOneByName(user.getName()) == null) {
		    if (aUser.getType() == 0) {
			user.setType(1);
		    } else {
			user.setType(2);
		    }
		    user.setCreateid(aUser.getId());
		    userMapper.insert(user);
		    b.setCode(ResponseBase.SUCCESS);
		} else {
		    b.setCode(ResponseBase.EXIST);
		}

	    } else {
		b.setCode(ResponseBase.WRONG_PARAM);
	    }

	} catch (Exception e) {
	    e.printStackTrace();
	    b.setCode(ResponseBase.WRONG_PARAM);
	}
	return b;
    }

    @WebAction(name = "updateAdminUser")
    public ResponseBase updateAdminUser(AdminUser user) {
	ResponseBase b = new ResponseBase();
	userMapper.update(user);
	b.setCode(ResponseBase.SUCCESS);
	return b;

    }

}
