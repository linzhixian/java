package com.funugame.parkour.datacenter.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.funugame.parkour.api.INoticeService;
import com.funugame.parkour.api.configbeans.ConfigConfig;
import com.funugame.parkour.api.configbeans.PetConfig;
import com.funugame.parkour.api.daoentity.Notice;
import com.funugame.parkour.api.daoentity.UserInfo;
import com.funugame.parkour.api.daoentity.UserPet;
import com.funugame.parkour.api.daoentity.UserVary;
import com.funugame.parkour.api.jsonbeans.GameNoticeList;
import com.funugame.parkour.api.jsonbeans.ScrollSystemNoticeListOne;
import com.funugame.parkour.api.jsonbeans.ScrollSystemNoticeListTwo;
import com.funugame.parkour.api.jsonbeans.ScrollUserNoticeList;
import com.funugame.parkour.dao.NoticeMapper;
import com.funugame.parkour.dao.UserInfoMapper;

@Service("noticeService_RMI")
public class NoticeService implements INoticeService {
    private INoticeService self;
    @Autowired
    private NoticeMapper noticeMapper;
    @Autowired
    private UserInfoMapper userInfoMapper;
    private static final int noticetype = 3; // 公告type：1——3为数据库中存贮的1：游戏公告；2：滚屏公告——1
					     // 3：滚屏公告——2
    private static final int useradultage = 20; // 滚屏公告壮年年龄
    private static final int userelderlyage = 40; // 滚屏公告老年年龄
    private static final int usercuplevel = 3; // 滚屏公告用户阶位
    private static final int userpetid = 5; // 滚屏公告宠物id
    
    private Notice[] userNoticeList;//使用固定长度的数组来保存系统生成的用户滚屏公共，旧的丢弃

    
    public NoticeService() {
	userNoticeList=new Notice[ConfigConfig.getIntValue("max_userscrollnotice")];
    }
    @Cacheable(value = "gameNotice")
    @Override
    // 游戏公告
    public List<Notice> getGameNoticeList() {
	Notice nt = new Notice();
	nt.setId(1);
	nt.setType(1);
	return noticeMapper.selectList(nt);
    }

    @Cacheable(value = "scrollSystemNotice1")
    @Override
    // 滚屏公告——1   2
    public List<Notice> getScrollSystemNoticeListOne() {
	List<Notice> scrollSystemNoticeListOne = new ArrayList<Notice>();
	Notice nt=new Notice();
	nt.setType(2);
	List<Notice> notices1=noticeMapper.selectList(nt);
	if (notices1.size()>0) {
	    for (int i = 0; i < notices1.size(); i++) {
		nt=notices1.get(i);
		scrollSystemNoticeListOne.add(nt);
	    }
	}
	return scrollSystemNoticeListOne;
    }

//    @Cacheable(value = "scrollSystemNotice2")
//    @Override
//    // 滚屏公告——2
//    public List<Notice> getScrollSystemNoticeListTwo() {
//	List<Notice> scrollSystemNoticeListTwo = new ArrayList<Notice>();
//	Notice nt = noticeMapper.selectList(3);
//	scrollSystemNoticeListTwo.add(nt);
//	return scrollSystemNoticeListTwo;
//    }

    // 用户滚屏公告
    @Override
    public List<Notice> getScrollUserNoticeList() {
	List<Notice> list=new ArrayList<Notice>();
	for(Notice n:userNoticeList) {
	    if(n!=null) list.add(n);
	}
	return list;
    }

    @Override
    public List<Object> getAllNoticeList() {
	List<Object> noticelist = new ArrayList<Object>();
	try {
	    List<Notice> gameNoticeList = self.getGameNoticeList();
	    GameNoticeList gnl = new GameNoticeList();
	    gnl.setGameNoticeList(gameNoticeList);
	    List<Notice> scrollSystemNoticeListOne = self.getScrollSystemNoticeListOne();
	    ScrollSystemNoticeListOne ssnlo = new ScrollSystemNoticeListOne();
	    ssnlo.setScrollSystemNoticeListOne(scrollSystemNoticeListOne);
//	    List<Notice> scrollSystemNoticeListTwo = self.getScrollSystemNoticeListTwo();
//	    ScrollSystemNoticeListTwo ssnlt = new ScrollSystemNoticeListTwo();
//	    ssnlt.setScrollSystemNoticeListTwo(scrollSystemNoticeListTwo);
	    List<Notice> scrollUserNoticeList = self.getScrollUserNoticeList();
	    ScrollUserNoticeList sunl = new ScrollUserNoticeList();
	    sunl.setScrollUserNoticeList(scrollUserNoticeList);
	    noticelist.add(gnl);
	    noticelist.add(ssnlo);
//	    noticelist.add(ssnlt);
	    noticelist.add(sunl);
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return noticelist;
    }

    /**
     * 0 所有公告 1 游戏公告 2
     */
    @Override
    public List<Notice> getNoticeList(int type) {
	List<Notice> noticelist = new ArrayList<Notice>();
	if (type == 1) {
	    noticelist = self.getGameNoticeList();
	} else if (type == 2) {
	    noticelist = self.getScrollSystemNoticeListOne();
//	} else if (type == 3) {
//	    noticelist = self.getScrollSystemNoticeListTwo();
	} else if (type == 4) {
	    noticelist = self.getScrollUserNoticeList();
	    
	}
	return noticelist;
    }

    // 宠物
    @Override
    public void addGetPetNotice(UserPet up) {
	    UserInfo ui = new UserInfo();
	    Notice nt = new Notice();
	    ui.setId(up.getUid());
	    ui = userInfoMapper.selectOne(ui);
	    String rolename = ui.getRolename();
	    PetConfig petConfig = PetConfig.getById(up.getId());
	    String petname = petConfig.getName();
	    nt.setContent("恭喜" + rolename + "经过不懈努力获得了" + petname + "宠物，实力大增。");
	    setScrollNotice(nt);
	    addUserNotice(nt);
    }

    // 阶位
    @Override
    public void addCupLevelNotice(UserVary startuv, UserVary uv) {
	if (uv.getCuplevel() == usercuplevel && startuv.getCuplevel() == usercuplevel - 1) {
	    UserInfo ui = new UserInfo();
	    Notice nt = new Notice();
	    ui.setId(uv.getUid());
	    ui = userInfoMapper.selectOne(ui);
	    String rolename = ui.getRolename();
	    nt.setContent("恭喜" + rolename + "玩家在竞技赛上达到" + uv.getCuplevel() + "阶位");
	    setScrollNotice(nt);
	    addUserNotice(nt);
	}
    }

    // 壮年
    @Override
    public void addAdultNotice(UserVary startuv, UserVary uv) {
	if (uv.getAge() == useradultage && startuv.getAge() == useradultage - 1) {
	    UserInfo ui = new UserInfo();
	    Notice nt = new Notice();
	    ui.setId(uv.getUid());
	    ui = userInfoMapper.selectOne(ui);
	    String rolename = ui.getRolename();
	    nt.setContent("恭喜" + rolename + "玩家成长到壮年，属性得到了大幅的提升。");
	    setScrollNotice(nt);
	    addUserNotice(nt);
	}
    }

    // 老年
    @Override
    public void addElderlyNotice(UserVary startuv, UserVary uv) {
	if (uv.getAge() == userelderlyage && startuv.getAge() == userelderlyage - 1) {
	    UserInfo ui = new UserInfo();
	    Notice nt = new Notice();
	    ui.setId(uv.getUid());
	    ui = userInfoMapper.selectOne(ui);
	    String rolename = ui.getRolename();
	    nt.setContent("恭喜" + rolename + "玩家成长到老年，迎来新的挑战。");
	    setScrollNotice(nt);
	    addUserNotice(nt);
	}
    }
    //最新的公共放最前面，旧的公共依次后移
    private synchronized void addUserNotice(Notice t) {
	if(t==null) return;
	for(int i=userNoticeList.length-1;i<=0;i--) {
	    if(userNoticeList[i]!=null) {
		if(i<userNoticeList.length-1) {
		    userNoticeList[i+1]=userNoticeList[i];
		    userNoticeList[i]=null;
		}
	    }
	}
	userNoticeList[0]=t;
	
    }
    public void setScrollNotice(Notice nt) {
	nt.setType(4);
	nt.setTigger(1);
	nt.setRepeatnum(0);
	nt.setScrolltime(3);
	nt.setIntervaltime(0);
	nt.setIscycle(0);
	nt.setTime(new Date());
    }

    @Override
    public void setSelf(INoticeService self) {
	this.self = self;
    }

}
