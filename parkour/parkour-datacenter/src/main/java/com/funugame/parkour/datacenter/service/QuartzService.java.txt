package com.funugame.parkour.datacenter.service;

import org.quartz.CronTrigger;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerFactory;
import org.quartz.impl.StdSchedulerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.funugame.parkour.api.IUserMessageService;
import com.funugame.parkour.dao.UserBestScoreMapper;
import com.funugame.parkour.dao.UserFriendMapper;
import com.funugame.parkour.dao.UserFriendMatchCountMapper;
import com.funugame.parkour.dao.UserMessageMapper;
import com.funugame.parkour.dao.UserVaryMapper;
import com.funugame.parkour.datacenter.quartz.ClearCupLevelJob;
import com.funugame.parkour.datacenter.quartz.FriendMatchClearJob;
import com.funugame.parkour.datacenter.quartz.ScoreRankJob;
import com.funugame.parkour.datacenter.quartz.SubcenesRankScoreJob;

@Service
public class QuartzService implements InitializingBean {

    protected static Logger logger = LoggerFactory.getLogger(QuartzService.class);

    @Autowired
    private UserBestScoreMapper userBestScoreMapper;
    @Autowired
    private UserVaryMapper userVaryMapper;
    @Autowired
    private UserMessageMapper userMessageMapper;
    @Autowired
    private IUserMessageService userMessageService;
    @Autowired
    private UserFriendMapper userFriendMapper;

    @Autowired
    private UserFriendMatchCountMapper userFriendMatchCountMapper;

    @Override
    public void afterPropertiesSet() throws Exception {
	SchedulerFactory schedulerFactory = new StdSchedulerFactory();
	Scheduler scheduler = schedulerFactory.getScheduler();
	//设置job中需要用到的东东
	scheduler.getContext().put("userBestScoreMapper", userBestScoreMapper);
	scheduler.getContext().put("userVaryMapper", userVaryMapper);
	scheduler.getContext().put("userMessageService", userMessageService);
	scheduler.getContext().put("userFriendMapper", userFriendMapper);
	scheduler.getContext().put("userFriendMatchCountMapper", userFriendMatchCountMapper);

	//荣耀总榜定时器 每周一的零点零分执行荣耀榜排行计算
	logger.info("启动荣耀总排行榜定时器：定时设置为(每周一0点0分)：" + "30 0 0 ? * Mon");
	scheduler.scheduleJob(new JobDetail("jobDetail-scorerank", "jobDetailGroup-s1", ScoreRankJob.class), new CronTrigger("trigger1", "group1", "10 0 0 ? * Mon"));

	// 每周一的零点零分执行荣耀榜排行计算
	logger.info("启动清除用户奖杯排名定时器：定时设置为(每周一0点0分)：" + "0 1 0 ? * Mon");
	scheduler.scheduleJob(new JobDetail("jobDetail-ClearCupLevel", "jobDetailGroup-s1", ClearCupLevelJob.class), new CronTrigger("trigger2", "group1",
		"0 1 0 ? * Mon"));

	// 每天的零点零分执行场景小榜排行计算
	logger.info("启动荣耀排行榜小榜定时器：定时设置为(每天0点0分)：" + "0 0 0 ? * *");
	scheduler.scheduleJob( new JobDetail("jobDetail-subcenesrankscore", "jobDetailGroup-s1", SubcenesRankScoreJob.class), new CronTrigger("trigger3", "group1", "20 0 0 * * ?"));

	// 每天好友挑战清除定时器
	logger.info("启动好友挑战每日清除定时器：定时设置为(每天0点0分)：" + "0 0 0 ? * *");
	scheduler.scheduleJob(new JobDetail("jobDetail-friendMatchResultClear", "jobDetailGroup-s1", FriendMatchClearJob.class), new CronTrigger("trigger4", "group1", "10 28 15 * * ?"));

	scheduler.start();
    }
}
