package com.funugame.parkour.datacenter.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.funugame.parkour.api.IUserMessageService;
import com.funugame.parkour.api.configbeans.ChapterConfig;
import com.funugame.parkour.api.configbeans.ChapterRankRewardConfig;
import com.funugame.parkour.api.configbeans.ConfigConfig;
import com.funugame.parkour.api.daoentity.UserFeedBack;
import com.funugame.parkour.api.daoentity.UserInfo;
import com.funugame.parkour.api.daoentity.UserMessage;
import com.funugame.parkour.dao.UserBestScoreMapper;
import com.funugame.parkour.dao.UserInfoMapper;
import com.funugame.parkour.dao.UserMessageMapper;

@Service("userMessageService_RMI")
public class UserMessageService implements IUserMessageService {
    @Autowired
    private UserMessageMapper userMessageMapper;
    @Autowired
    private UserInfoMapper userInfoMapper;
    @Autowired
    private UserBestScoreMapper userBestScoreMapper;

    @Override
    public List<UserMessage> getMessageList(Integer uid, Integer type) {
	List<UserMessage> msgList = new ArrayList<UserMessage>();
	msgList = userMessageMapper.selectMessageList(uid, type);
	int size = msgList.size();
	if (size > ConfigConfig.getIntValue("max_usermessage")) {

	    for (int index = ConfigConfig.getIntValue("max_usermessage") - 1; index < size; index++) {
		userMessageMapper.deleteMessage(msgList.get(index).getId(), msgList.get(index).getUid());
	    }
	}
	return msgList;
    }

    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");

    @Override
    public void insertAddFriendMessage(int uid, int fuid) {
	// 添加好友消息
	try {
	    UserInfo uif = new UserInfo();
	    uif.setId(uid);
	    uif = userInfoMapper.selectOne(uif);
	    String msg = sdf.format(new Date()) + " \"" + uif.getRolename() + "\"玩家添加您为好友";
	    sendUserMessage(fuid, uid, UserMessage.TYPE_FRIEND, msg);
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    // 添加反馈消息
    @Override
    public void setUserFeedBackMessage(UserFeedBack ufb) {
	UserInfo uf = new UserInfo();
	uf.setId(ufb.getUid());
	uf = userInfoMapper.selectOne(uf);
	String rolename = uf.getRolename();
	String msg = rolename + "玩家，感谢您对我们游戏提出的宝贵意见，我们会尽快妥善处理。";
	sendUserMessage(ufb.getUid(), UserMessage.TYPE_FEEDBACK, msg);
    }

    @Override
    public void sendFeedBackReply(Integer uid, String msg) {
	sendUserMessage(uid, UserMessage.TYPE_FEEDBACK, msg);
    }

    // 删除消息
    @Override
    public Boolean deleteUserMessage(int id, int uid) {
	int d = userMessageMapper.deleteMessage(id, uid);
	return d > 0;

    }

    @Override
    public boolean sendSystemUserMessage(Integer uid, String msg) {
	return sendUserMessage(uid, 0, UserMessage.TYPE_SYS, msg);
    }

    private boolean sendUserMessage(Integer uid, Integer fromUid, int type, String msg) {
	return sendUserMessage(uid, fromUid, type, 0, msg);
    }

    private boolean sendUserMessage(Integer uid, int type, String msg) {
	return sendUserMessage(uid, 0, type, 0, msg);
    }

    private boolean sendUserMessage(Integer uid, Integer fromUid, int type, int rank, String msg) {
	UserMessage umsg = new UserMessage();
	umsg.setUid(uid);
	umsg.setFrom_uid(fromUid);
	umsg.setType(type);
	umsg.setIsread(0);
	umsg.setScenerank(0);
	umsg.setContent(msg);
	umsg.setScenerank(rank);
	try {
	    userMessageMapper.insertMessage(umsg);
	} catch (Exception e) {
	    e.printStackTrace();
	    return false;
	}
	return true;
    }

    @Override
    public void sendSubSceneRankMsg(Integer uid, int chapterid, int rank, int score, String time) {
	ChapterRankRewardConfig scenerankrewardConfig = ChapterRankRewardConfig.getById(rank);
	if(scenerankrewardConfig==null) {
	    scenerankrewardConfig = ChapterRankRewardConfig.getById(rank);
	}
	Integer cup = scenerankrewardConfig.getCup();
	String cupString = "";
	if (cup != null && cup > 0) {
	    cupString = "和" + cup + "奖杯。";
	}
	String msg = "荣耀赛场排行日奖励:" + scenerankrewardConfig.getGold() + "金币" + cupString;
	this.sendUserMessage(uid, 0, UserMessage.TYPE_SUBRANK, rank, msg);
    }
}
