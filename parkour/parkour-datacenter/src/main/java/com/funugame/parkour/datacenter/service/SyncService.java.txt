package com.funugame.parkour.datacenter.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;

import com.funugame.parkour.api.INoticeService;
import com.funugame.parkour.api.ISyncService;
import com.funugame.parkour.api.IUserMessageService;
import com.funugame.parkour.api.IUserTestActivityService;
import com.funugame.parkour.api.configbeans.ConfigConfig;
import com.funugame.parkour.api.configbeans.CupLevelConfig;
import com.funugame.parkour.api.configbeans.ExplevelConfig;
import com.funugame.parkour.api.daoentity.DiamondRecord;
import com.funugame.parkour.api.daoentity.Sync;
import com.funugame.parkour.api.daoentity.UserAchievement;
import com.funugame.parkour.api.daoentity.UserFriend;
import com.funugame.parkour.api.daoentity.UserLastLoginTime;
import com.funugame.parkour.api.daoentity.UserPet;
import com.funugame.parkour.api.daoentity.UserPiece;
import com.funugame.parkour.api.daoentity.UserProp;
import com.funugame.parkour.api.daoentity.UserStat;
import com.funugame.parkour.api.daoentity.UserTech;
import com.funugame.parkour.api.daoentity.UserVary;
import com.funugame.parkour.api.jsonbeans.SyncResponse;
import com.funugame.parkour.dao.DiamondRecordMapper;
import com.funugame.parkour.dao.StatMapper;
import com.funugame.parkour.dao.UserAchievementMapper;
import com.funugame.parkour.dao.UserActivityMapper;
import com.funugame.parkour.dao.UserFriendMapper;
import com.funugame.parkour.dao.UserInfoMapper;
import com.funugame.parkour.dao.UserLastLoginTimeMapper;
import com.funugame.parkour.dao.UserMessageMapper;
import com.funugame.parkour.dao.UserPetMapper;
import com.funugame.parkour.dao.UserPieceMapper;
import com.funugame.parkour.dao.UserPropMapper;
import com.funugame.parkour.dao.UserTechMapper;
import com.funugame.parkour.dao.UserVaryMapper;
import com.lzx.framework.web.springjson.beans.ResponseBase;

@Service("syncService_RMI")
public class SyncService implements ISyncService {
    private ISyncService self;
    @Autowired
    private IUserMessageService userMessageUservice;
    @Autowired
    private INoticeService noticeService;
    @Autowired
    private UserPropMapper userPropMapper;
    @Autowired
    private UserPetMapper userPetMapper;
    @Autowired
    private UserVaryMapper userVaryMapper;
    @Autowired
    private UserFriendMapper userFriendMapper;
    @Autowired
    private UserMessageMapper userMessageMapper;
    @Autowired
    private UserInfoMapper userInfoMapper;
    @Autowired
    private UserTechMapper userTechMapper;
    @Autowired
    private UserPieceMapper userPieceMapper;
    @Autowired
    private UserAchievementMapper userAchievementMapper;
    @Autowired
    private UserLastLoginTimeMapper userLastLoginTimeMapper;
    @Autowired
    private UserActivityMapper userActivityMapper;

    @Autowired
    private IUserTestActivityService userTestActivityService;

    @Autowired
    private StatMapper statMapper;

    @Autowired
    private DiamondRecordMapper diamondRecordMapper;

    @Override
    public SyncResponse sync(Sync body) {
	Integer uid = body.getUid();
	SyncResponse sr = new SyncResponse();
	if (body == null) {
	    sr.setCode(ResponseBase.WRONG_PARAM);
	} else {
	    if (body.getProp() != null) {
		sr.setCode_prop(self.syncProp(uid, body.getProp()));
	    }
	    if (body.getVary() != null) {
		sr.setCode_vary(self.syncVary(uid, body.getVary()));
	    }
	    if (body.getFriend() != null) {
		sr.setCode_friend(self.syncFriend(uid, body.getFriend()));
	    }
	    if (body.getPet() != null) {
		sr.setCode_pet(self.syncPet(uid, body.getPet()));
	    }
	    if (body.getTech() != null) {
		sr.setCode_tech(self.syncTech(uid, body.getTech()));
	    }
	    if (body.getPiece() != null) {
		sr.setCode_piece(self.syncPiece(uid, body.getPiece()));
	    }
	    if (body.getAchievement() != null) {
		sr.setCode_achievement(self.syncAchievement(uid, body.getAchievement()));
	    }
	    if (body.getLoginaward() != null) {
		sr.setCode_award(self.syncAward(uid, body.getLoginaward()));
	    }
	    if (body.getUserStat() != null) {
		sr.setCode_userStat(self.syncUserStat(uid, body.getUserStat()));
	    }

	    if (body.getDiamondRecord() != null) {
		sr.setCode_diamondRecord(self.syncDiamondRecord(uid, body.getDiamondRecord()));
	    }
	    sr.setCode(1);
	}
	return sr;
    }

    public Boolean syncProp(Integer uid, List<UserProp> value) {
	boolean change = false;
	try {
	    for (UserProp up : value) {
		up.setUid(uid);
		if (up.getMark().equals("insert")) {
		    userPropMapper.insert(up);
		    change = true;
		} else if (up.getMark().equals("update")) {
		    userPropMapper.update(up);
		    change = true;
		} else if (up.getMark().equals("delete")) {
		    userPropMapper.delete(up);
		    change = true;
		}
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return change;
    }

    @Override
    public Boolean syncVary(Integer uid, UserVary uv) {
	boolean change = false;
	UserVary startuv = userVaryMapper.selectOne(uid);
	int oldCupLevel = startuv.getCuplevel();
	if (uv != null) {
	    try {
		if (uv.getExp() != null)
		    uv.setAge(ExplevelConfig.getAgeByExp(uv.getExp()));
		if (uv.getCup() != null) {
		    int newcuplevel = CupLevelConfig.getLevelByCup(uv.getCup());
		    if (newcuplevel == 3 && newcuplevel > oldCupLevel) {
			userTestActivityService.cupUpdate(uid);
		    }
		}

		uv.setRuncount(null);// 无需用户同步的数据
		uv.setGetgold(null);// 无需用户同步的数据
		uv.setUid(uid);

		userVaryMapper.update(uv);
		UserVary afterUv = userVaryMapper.selectOne(uid);
		noticeService.addAdultNotice(startuv, afterUv);
		noticeService.addElderlyNotice(startuv, afterUv);
		noticeService.addCupLevelNotice(startuv, afterUv);
		change = true;
	    } catch (Exception e) {
		e.printStackTrace();
	    }
	}
	return change;
    }

    @Caching(evict = { @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+0"), @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+1"),
	    @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+2"), @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+3"),
	    @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+4"), @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+5") })
    // @CacheEvict(value = "friendscoreranklist", key =
    // "{#uid+\".\"+\"0\",#uid+\".\"+\"1\",#uid+\".\"+\"2\",#uid+\".\"+\"3\",#uid+\".\"+\"4\",#uid+\".\"+\"5\"}",
    // beforeInvocation = true)
    public Boolean syncFriend(Integer uid, List<UserFriend> value) {
	boolean change = false;
	try {
	    for (UserFriend uf : value) {
		uf.setUid(uid);
		int ufcount = userFriendMapper.selectCount(uf.getUid());
		String config = ConfigConfig.getValue("max_friendnum");
		if (uf.getMark().equals("insert") && ufcount <= Integer.valueOf(config)) {
		    self.addFriend(uf.getUid(), uf.getFuid());
		    change = true;
		}
		if (uf.getMark().equals("delete")) {
		    userFriendMapper.deleteFriend(uf);
		    change = true;
		}
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return change;

    }

    @Override
    public Boolean syncPet(Integer uid, List<UserPet> value) {
	boolean change = false;
	try {
	    for (UserPet ut : value) {
		ut.setUid(uid);
		if (ut.getMark().equals("insert")) {
		    userPetMapper.insert(ut);
		    noticeService.addGetPetNotice(ut);
		    change = true;
		} else if (ut.getMark().equals("update")) {
		    userPetMapper.update(ut);
		    change = true;
		} else if (ut.getMark().equals("delete")) {
		    userPetMapper.delete(ut);
		    change = true;
		}
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return change;
    }

    @Override
    public Boolean syncTech(Integer uid, List<UserTech> value) {
	boolean change = false;
	try {
	    for (UserTech ut : value) {
		ut.setUid(uid);
		if (ut.getMark().equals("insert")) {
		    userTechMapper.insert(ut);
		    change = true;
		} else if (ut.getMark().equals("update")) {
		    userTechMapper.update(ut);
		    change = true;
		} else if (ut.getMark().equals("delete")) {
		    userTechMapper.delete(ut);
		    change = true;
		}
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return change;
    }

    @Override
    public Boolean syncPiece(Integer uid, List<UserPiece> value) {
	boolean change = false;
	try {
	    for (UserPiece ut : value) {
		ut.setUid(uid);
		if (ut.getMark().equals("insert")) {
		    userPieceMapper.insert(ut);
		    change = true;
		} else if (ut.getMark().equals("update")) {
		    userPieceMapper.update(ut);
		    change = true;
		} else if (ut.getMark().equals("delete")) {
		    userPieceMapper.delete(ut);
		    change = true;
		}
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return change;
    }

    @Override
    public Boolean syncAchievement(Integer uid, List<UserAchievement> value) {
	boolean change = false;
	try {
	    for (UserAchievement ut : value) {
		ut.setUid(uid);
		if (ut.getMark().equals("insert")) {
		    userAchievementMapper.insert(ut);
		    change = true;
		} else if (ut.getMark().equals("update")) {
		    userAchievementMapper.update(ut);
		    change = true;
		} else if (ut.getMark().equals("delete")) {
		    userAchievementMapper.delete(ut);
		    change = true;
		}
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return change;
    }

    @Override
    public Boolean syncAward(Integer uid, UserLastLoginTime ul) {
	boolean change = false;
	if (ul != null) {
	    try {
		ul.setUid(uid);
		if (ul.getAward() == true || ul.getAward().equals("true"))
		    userLastLoginTimeMapper.updateAward(ul);
		change = true;
	    } catch (Exception e) {
		e.printStackTrace();
	    }
	}
	return change;
    }

    @Override
    public void setSelf(ISyncService self) {
	this.self = self;
    }

    @Caching(evict = { @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+0"), @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+1"),
	    @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+2"), @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+3"),
	    @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+4"), @CacheEvict(value = "friendscoreranklist", key = "#uid+\".\"+5") })
    @Override
    public int addFriend(int uid, int fuid) {
	if (uid == fuid)
	    return ResponseBase.WRONG_PARAM;
	boolean isExit = this.userInfoMapper.isUserExist(fuid);
	if (isExit) {
	    try {
		this.userFriendMapper.insertFriend(uid, fuid);
	    } catch (Exception e) {
		return ResponseBase.EXIST;

	    }
	} else {
	    return ResponseBase.NO_EXIST;
	}
	// 添加好友消息
	userMessageUservice.insertAddFriendMessage(uid, fuid);
	self.clearRecommendFriendCache(uid);
	return ResponseBase.SUCCESS;
    }

    @Caching(evict = { @CacheEvict(value = "recommendfriendlist", key = "#uid") })
    public void clearRecommendFriendCache(int uid) {

    }

    @Override
    public Boolean syncUserStat(Integer uid, UserStat userStat) {
	if (userStat.getUsepropcount() != null) {
	    statMapper.addUsePropCount(uid, userStat.getUsepropcount());
	    int usepropcount = statMapper.getUserPropCount(uid);

	    return true;
	}
	return false;
    }

    @Override
    public boolean syncDiamondRecord(Integer uid, List<DiamondRecord> diamondRecords) {
	try {
	    for (DiamondRecord r : diamondRecords) {
		r.setUid(uid);
		this.diamondRecordMapper.insert(r);
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	    return false;
	}
	return true;
    }
}
