package com.funugame.parkour.datacenter.quartz;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

import com.funugame.parkour.api.IUserMessageService;
import com.funugame.parkour.api.configbeans.ChapterConfig;
import com.funugame.parkour.api.configbeans.ChapterRankRewardConfig;
import com.funugame.parkour.api.daoentity.BestScore;
import com.funugame.parkour.api.daoentity.UserMessage;
import com.funugame.parkour.dao.UserBestScoreMapper;
import com.funugame.parkour.dao.UserMessageMapper;

public class SubcenesRankScoreJob implements Job {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    @Override
    public void execute(JobExecutionContext context) throws JobExecutionException {
	try {
	    UserBestScoreMapper userBestScoreMapper = (UserBestScoreMapper) context.getScheduler().getContext().get("userBestScoreMapper");
	    IUserMessageService userMessageService = (IUserMessageService) context.getScheduler().getContext().get("userMessageService");
	    userBestScoreMapper.callsubcenesranksrore();
	    // 添加荣耀小榜消息
	    String time = sdf.format(new Date());
	    Iterator<Integer> iter = ChapterConfig.ALL.keySet().iterator();
	    while (iter.hasNext()) {
		int sceneid = iter.next();
		List<BestScore> sceneranklist1 = getBestScoreList(sceneid, time, userBestScoreMapper);
		this.insertSceneMessage(userMessageService, sceneranklist1, time, sceneid);
	    }
	    userBestScoreMapper.clearDayRank();

	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    private List<BestScore> getBestScoreList(int sceneid, String ranktime, UserBestScoreMapper userBestScoreMapper) {
	return userBestScoreMapper.getSubscenesRankScore(sceneid, ranktime);
    }

    public void insertSceneMessage( IUserMessageService userMessageService, List<BestScore> list, String time, int sceneid) {
	try {
	    for (int i = 0; i < list.size(); i++) {
		BestScore bs = list.get(i);
		int rank = Integer.parseInt(org.apache.commons.beanutils.BeanUtils.getProperty(bs, "rank" + sceneid));
		int score = Integer.parseInt(org.apache.commons.beanutils.BeanUtils.getProperty(bs, "score" + sceneid));
		userMessageService.sendSubSceneRankMsg(bs.getUid(),sceneid,rank,score,time);
	    }
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

}
