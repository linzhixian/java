package com.funugame.parkour.datacenter.service;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.funugame.parkour.api.IUserTestActivityService;
import com.funugame.parkour.api.configbeans.FunctionOpenConfig;
import com.funugame.parkour.api.configbeans.TestActivityConfig;
import com.funugame.parkour.api.daoentity.UserLastLoginTime;
import com.funugame.parkour.api.daoentity.UserTestActivity;
import com.funugame.parkour.api.daoentity.UserVary;
import com.funugame.parkour.api.jsonbeans.UserTestActivityResponse;
import com.funugame.parkour.dao.UserActivityMapper;
import com.funugame.parkour.dao.UserInfoMapper;
import com.funugame.parkour.dao.UserLastLoginTimeMapper;
import com.funugame.parkour.dao.UserVaryMapper;
import com.lzx.framework.web.springjson.beans.ResponseBase;

@Service("userTestActivityService_RMI")
public class UserTestActivityService implements IUserTestActivityService {

    @Autowired
    private UserActivityMapper userActivityMapper;
    @Autowired
    private UserVaryMapper userVaryMapper;
    @Autowired
    private UserLastLoginTimeMapper userLastLoginTimeMapper;
    @Autowired
    private UserInfoMapper userInfoMapper;

    public static Lock lock = new ReentrantLock();

    // 活动1判断是否充值
    @Override
    public Boolean userchargeMoney(Integer uid, int money) {
	if (!checkOpen())
	    return false;
	Boolean bl = false;
	if (money > 0) {
	    UserTestActivity uta = new UserTestActivity();
	    uta.setUid(uid);
	    uta.setAid(1);
	    uta.setResult(1);
	    try {
		userActivityMapper.insert(uta);
	    } catch (Exception e) {
		return false;
	    }
	}
	return bl;
    }

    @Override
    public void cupUpdate(Integer uid) {
	if (!checkOpen())
	    return;
	UserTestActivity uta = new UserTestActivity();
	uta.setUid(uid);
	uta.setAid(2);
	uta.setResult(1);
	try {
	    userActivityMapper.insert(uta);
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    private boolean checkOpen() {
	FunctionOpenConfig functionOpenConfig = FunctionOpenConfig.getById(1);
	return functionOpenConfig.isOpen();
    }

    @Override
    public void avtivityThree(Integer uid, int daynum) {
	if (!checkOpen())
	    return;
	// 首测活动3
	if (daynum == 7) {
	    UserTestActivity uta = new UserTestActivity();
	    uta.setUid(uid);
	    uta.setAid(3);
	    uta.setResult(1);
	    try {
		userActivityMapper.insert(uta);
	    } catch (Exception e) {

	    }
	}

    }

    // 活动4
    @Override
    public void activityFour(Integer uid, Integer totalrunnum) {
	if (!checkOpen())
	    return;
	if (totalrunnum >= 100000) {
	    UserTestActivity uta = new UserTestActivity();
	    uta.setUid(uid);
	    uta.setAid(4);
	    uta.setResult(1);
	    try {
		userActivityMapper.insert(uta);
	    } catch (Exception e) {

	    }
	}
    }

    @Override
    public List<UserTestActivity> getUserTestActivity(Integer uid) {
	List<UserTestActivity> list = new ArrayList<UserTestActivity>();
	List<UserTestActivity> newlist = new ArrayList<UserTestActivity>();
	List<Integer> list2 = new ArrayList<Integer>();
	UserTestActivity uta = new UserTestActivity();
	uta.setUid(uid);
	try {
	    list = userActivityMapper.selectList(uta);
	    if (list.size() == 0) {
		for (int i = 1; i <= 4; i++) {
		    uta.setUid(uid);
		    uta.setResult(0);
		    uta.setAid(i);
		    this.modifyCurrentprogress(uta);
		    newlist.add(uta);
		    uta = new UserTestActivity();
		}

	    } else if (list.size() > 0 && list.size() < 4) {
		for (int i = 0; i < list.size(); i++) {
		    uta = list.get(i);
		    list2.add(uta.getAid());
		    this.setProgress(uta);
		    newlist.add(uta);
		    uta = new UserTestActivity();
		}
		if (!list2.contains(1)) {
		    uta = new UserTestActivity();
		    uta.setUid(uid);
		    uta.setAid(1);
		    uta.setResult(0);
		    this.modifyCurrentprogress(uta);
		    newlist.add(uta);
		}
		if (!list2.contains(2)) {
		    uta = new UserTestActivity();
		    uta.setUid(uid);
		    uta.setAid(2);
		    uta.setResult(0);
		    this.modifyCurrentprogress(uta);
		    newlist.add(uta);
		}
		if (!list2.contains(3)) {
		    uta = new UserTestActivity();
		    uta.setUid(uid);
		    uta.setAid(3);
		    uta.setResult(0);
		    this.modifyCurrentprogress(uta);
		    newlist.add(uta);
		}
		if (!list2.contains(4)) {
		    uta = new UserTestActivity();
		    uta.setUid(uid);
		    uta.setAid(4);
		    uta.setResult(0);
		    this.modifyCurrentprogress(uta);
		    newlist.add(uta);
		}
	    } else if (list.size() == 4) {
		for (int i = 0; i < 4; i++) {
		    uta = list.get(i);
		    this.setProgress(uta);
		    newlist.add(uta);
		}

	    }

	} catch (Exception e) {
	    e.printStackTrace();
	}
	return newlist;
    }

    @Override
    public UserTestActivityResponse getActivityList(Integer uid) {
	FunctionOpenConfig foc = FunctionOpenConfig.getById(1);
	UserTestActivityResponse r = new UserTestActivityResponse();
	List<UserTestActivity> list = new ArrayList<UserTestActivity>();
	if (foc.isOpen()) {
	    list = this.getUserTestActivity(uid);
	}
	r.setUserTestActivities(list);
	if (list.size() > 0) {
	    r.setCode(ResponseBase.SUCCESS);
	} else {
	    r.setCode(ResponseBase.UNKONW_ERROR);
	}
	return r;
    }

    public void setProgress(UserTestActivity uta) {
	TestActivityConfig testActivityConfig = TestActivityConfig.getById(uta.getAid());
	if (uta.getAid() == 1) {
	    uta.setCurrentprogress(1);
	    uta.setTargetprogress(1);
	} else if (uta.getAid() == 2) {
	    uta.setCurrentprogress(testActivityConfig.getProgress());
	    uta.setTargetprogress(testActivityConfig.getProgress());
	} else if (uta.getAid() == 3) {
	    uta.setCurrentprogress(testActivityConfig.getProgress());
	    uta.setTargetprogress(testActivityConfig.getProgress());
	} else if (uta.getAid() == 4) {
	    uta.setCurrentprogress(testActivityConfig.getProgress());
	    uta.setTargetprogress(testActivityConfig.getProgress());
	}
    }

    private void modifyCurrentprogress(UserTestActivity uta) {
	TestActivityConfig testActivityConfig = TestActivityConfig.getById(uta.getAid());
	if (uta.getAid() == 1) {
	    uta.setCurrentprogress(0);
	    uta.setTargetprogress(1);
	} else if (uta.getAid() == 2) {
	    UserVary uv = new UserVary();
	    try {
		uv = userVaryMapper.selectOne(uta.getUid());
	    } catch (Exception e) {
		// TODO: handle exception
	    }
	    uta.setCurrentprogress(uv.getCuplevel());
	    uta.setTargetprogress(testActivityConfig.getProgress());
	} else if (uta.getAid() == 3) {
	    UserLastLoginTime ullt = new UserLastLoginTime();
	    try {
		ullt = userLastLoginTimeMapper.selectList(uta.getUid());
	    } catch (Exception e) {
		// TODO: handle exception
	    }
	    uta.setCurrentprogress(ullt.getLogindaynum());
	    uta.setTargetprogress(testActivityConfig.getProgress());
	} else if (uta.getAid() == 4) {
	    UserVary uv = new UserVary();
	    try {
		uv = userVaryMapper.selectOne(uta.getUid());
	    } catch (Exception e) {
		// TODO: handle exception
	    }
	    uta.setCurrentprogress(uv.getTotalrunnum());
	    uta.setTargetprogress(testActivityConfig.getProgress());
	}
    }

    @Override
    public Boolean updateUserTestActivity(UserTestActivity uta) {
	Boolean bl = false;
	uta.setResult(2);
	try {
	    userActivityMapper.update(uta);
	    bl = true;
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return bl;
    }

}
