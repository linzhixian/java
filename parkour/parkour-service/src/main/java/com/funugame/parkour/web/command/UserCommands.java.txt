package com.funugame.parkour.web.command;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import com.funugame.parkour.api.INoticeService;
import com.funugame.parkour.api.IRankService;
import com.funugame.parkour.api.IRecommendFriendService;
import com.funugame.parkour.api.ISyncService;
import com.funugame.parkour.api.IUserFeedBackService;
import com.funugame.parkour.api.IUserMessageService;
import com.funugame.parkour.api.IUserService;
import com.funugame.parkour.api.IUserTestActivityService;
import com.funugame.parkour.api.daoentity.Notice;
import com.funugame.parkour.api.daoentity.RecommendFriend;
import com.funugame.parkour.api.daoentity.Sync;
import com.funugame.parkour.api.daoentity.UserFeedBack;
import com.funugame.parkour.api.daoentity.UserFriend;
import com.funugame.parkour.api.daoentity.UserMessage;
import com.funugame.parkour.api.daoentity.UserTestActivity;
import com.funugame.parkour.api.jsonbeans.AchievementsResponse;
import com.funugame.parkour.api.jsonbeans.GameResult;
import com.funugame.parkour.api.jsonbeans.Login;
import com.funugame.parkour.api.jsonbeans.LoginResult;
import com.funugame.parkour.api.jsonbeans.MessageResponse;
import com.funugame.parkour.api.jsonbeans.NoticeResponse;
import com.funugame.parkour.api.jsonbeans.RechargeMoney;
import com.funugame.parkour.api.jsonbeans.RecommendFriendResponse;
import com.funugame.parkour.api.jsonbeans.SyncResponse;
import com.funugame.parkour.api.jsonbeans.Uid;
import com.funugame.parkour.api.jsonbeans.UpdateRoleName;
import com.funugame.parkour.api.jsonbeans.UpdateRoleNameResult;
import com.funugame.parkour.api.jsonbeans.UpdateUserTestActivityResponse;
import com.funugame.parkour.api.jsonbeans.UserTestActivityResponse;
import com.funugame.parkour.web.jsonbean.RechargeMoneyResponse;
import com.lzx.framework.web.springjson.annotation.WebAction;
import com.lzx.framework.web.springjson.annotation.WebCommand;
import com.lzx.framework.web.springjson.beans.ResponseBase;

@WebCommand
@Service
@Lazy
public class UserCommands {

    @Autowired
    private IUserService userService;
    @Autowired
    private ISyncService syncService;
    @Autowired
    private IRankService rankService;
    @Autowired
    private IUserFeedBackService feedBackService;
    @Autowired
    private IRecommendFriendService recommendFriendService;
    @Autowired
    private IUserMessageService userMessageService;
    @Autowired
    private INoticeService noticeService;
    @Autowired
    private IUserTestActivityService userTestActivityService;

    /**
     * 登录or注册 @author lzx 2014年11月21日下午2:14:02
     */
    @WebAction(name = "login")
    public LoginResult login(Login request, Map<String, String> header) {
	request.setUserAgent(header.get("user-agent"));
	LoginResult result = userService.loginOrRegister(request);
	if (result == null) {
	    result = new LoginResult();
	    result.setCode(ResponseBase.WRONG_PARAM);
	}
	return result;
    }

    @WebAction(name = "updateRoleName")
    public UpdateRoleNameResult updateRoleName(UpdateRoleName request) throws UnsupportedEncodingException {
	UpdateRoleName updateRoleName = (UpdateRoleName) request;
	UpdateRoleNameResult result = new UpdateRoleNameResult();
	result.setRoleName(updateRoleName.getRoleName());
	result.setCode(ResponseBase.UNKONW_ERROR);
	if (updateRoleName.getUid() != null && !"".equals(updateRoleName.getRoleName())) {
	    if (userService.updateRoleName(request.getUid(), request.getRoleName())) {
		result.setCode(1);
	    }
	}
	return result;
    }

    /**
     * 同步数据
     */
    @WebAction(name = "sync")
    public SyncResponse sync(Sync body) {
	return this.syncService.sync(body);
    }

    /**
     * 用户反馈
     */
    @WebAction(name = "userFeedBack")
    public ResponseBase userFeedBack(UserFeedBack ufb) {
	int success = feedBackService.content(ufb);
	ResponseBase r = new ResponseBase();
	r.setCode(success);
	return r;
    }

    /*
     * 推荐好友列表
     */
    @WebAction(name = "getRecommendFriendList")
    public RecommendFriendResponse getRecommendFriendList(UserFriend uf) {
	RecommendFriendResponse r = new RecommendFriendResponse();
	List<RecommendFriend> list = recommendFriendService.getRecommendFriendList(uf.getUid());
	r.setFriendList(list);
	if (list.size() > 0) {
	    r.setCode(ResponseBase.SUCCESS);
	} else {
	    r.setCode(ResponseBase.UNKONW_ERROR);
	}
	return r;
    }

    // 用户消息列表
    @WebAction(name = "getUserMessageList")
    public MessageResponse getUserMessageList(UserMessage umsg) {
	MessageResponse r = new MessageResponse();
	List<UserMessage> list = userMessageService.getMessageList(umsg.getUid(), umsg.getType());
	r.setUserMessageList(list);
	if (list != null) {
	    r.setCode(ResponseBase.SUCCESS);
	} else {
	    r.setCode(ResponseBase.UNKONW_ERROR);
	}
	return r;
    }

    // 用户是否已读取消息
    @WebAction(name = "deleteUserMessage")
    public Boolean deleteUserMessage(UserMessage umsg) {
	return userMessageService.deleteUserMessage(umsg.getId(), umsg.getUid());
    }

    // 获取公告
    @WebAction(name = "getNoticeList")
    public NoticeResponse getNoticeList(Notice nt) {
	NoticeResponse r = new NoticeResponse();
	List<Notice> list = new ArrayList<Notice>();
	List<Object> alllist = new ArrayList<Object>();
	if (nt.getType() == 0) {
	    alllist = noticeService.getAllNoticeList();
	    r.setUserAllNoticeList(alllist);
	    if (alllist.size() >= 0) {
		r.setCode(ResponseBase.SUCCESS);
	    } else {
		r.setCode(ResponseBase.UNKONW_ERROR);
	    }
	} else if (nt.getType() >= 1 && nt.getType() <= 4) {
	    list = noticeService.getNoticeList(nt.getType());
	    r.setUserNoticeList(list);
	    if (list.size() > 0) {
		r.setCode(ResponseBase.SUCCESS);
	    } else {
		r.setCode(ResponseBase.UNKONW_ERROR);
	    }
	} else {
	    r.setCode(ResponseBase.UNKONW_ERROR);
	}
	return r;
    }

    // 获取首测活动列表
    @WebAction(name = "getUserTestActivity")
    public UserTestActivityResponse getUserTestActivityList(Uid uid) {
	return this.userTestActivityService.getActivityList(uid.getUid());
    }

    // 领取活动按钮状态
    @WebAction(name = "updateUserTestActivity")
    public UpdateUserTestActivityResponse updateUserTestActivityResponse(UserTestActivity uta) {
	UpdateUserTestActivityResponse r = new UpdateUserTestActivityResponse();
	Boolean bl = userTestActivityService.updateUserTestActivity(uta);
	r.setCode_userTestActivity(bl);
	if (bl) {
	    r.setCode(ResponseBase.SUCCESS);
	} else {
	    r.setCode(ResponseBase.UNKONW_ERROR);
	}
	return r;
    }

    @WebAction(name = "rechargeMoney")
    public RechargeMoneyResponse rechargeMoney(RechargeMoney rm) {
	RechargeMoneyResponse b = new RechargeMoneyResponse();
	Boolean bl = userTestActivityService.userchargeMoney(rm.getUid(), rm.getMoney());
	b.setResult(bl);
	if (bl) {
	    b.setCode(ResponseBase.SUCCESS);
	} else {
	    b.setCode(ResponseBase.UNKONW_ERROR);
	}
	return b;
    }

    @WebAction(name = "submitGameResult")
    public ResponseBase submitGameResult(GameResult result) {
	// TOOD 签名检查
	return userService.submitRunResult(result);

    }

    // @WebAction(name = "sign")
    // public String sign(String sign) {
    // return sign;
    // }
    // @WebAction(name = "value")
    // public RequestJson value(RequestJson value) {
    // return value;
    // }
    @WebAction(name = "source")
    public void source(String source) {

    }

    @WebAction(name = "uid")
    public void uid(Integer uid) {

    }

    @WebAction(name = "getAchievements")
    public AchievementsResponse getAchievements(Uid uid) {
	AchievementsResponse res = new AchievementsResponse();
	res.setCode(ResponseBase.SUCCESS);
	res.setAchievements(this.userService.getAchievement(uid.getUid()));
	return res;
    }
}
