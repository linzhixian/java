package com.funugame.parkour.web.admin;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.funugame.parkour.api.IUserService;
import com.funugame.parkour.api.daoentity.UserInfo;
import com.funugame.parkour.web.MemberInterceptor;

@Controller
@RequestMapping(value = "/user")
@Lazy
public class UserController_T {
    @Autowired
    private IUserService userService;

    @RequestMapping(value = "/index", method = RequestMethod.GET)
    public String index(Model model) {
	return "/index";
    }

    @RequestMapping(value = "/list", method = RequestMethod.GET)
    public String list(Model model) {
	model.addAttribute(new UserInfo());
	return "userinfo/list";
    }

    @RequestMapping(value = "/list", method = RequestMethod.POST)
    public String list2(@Validated UserInfo userinfo, BindingResult br, Model model) {
	if (userinfo.getAccount().equals("")) {
	    userinfo.setAccount(null);
	}
	try {
	    userinfo = userService.selectUserInfoId(userinfo);
	} catch (Exception e) {
	    e.printStackTrace();
	}
	List list = new ArrayList();
	list.add(userinfo);
	model.addAttribute("list", list);
	return "userinfo/list";
    }

    @RequestMapping(value = "/add", method = RequestMethod.GET)
    public String add(Model model) {
	model.addAttribute(new UserInfo());
	return "userinfo/add";
    }

    @RequestMapping(value = "/add", method = RequestMethod.POST)
    public String add(@Validated UserInfo userinfo, BindingResult br, Model model) {
	try {
	    userService.insertUserInfo(userinfo);
	} catch (Exception e) {
	    e.printStackTrace();
	}

	return "redirect:/user/list";
    }

    @RequestMapping(value = "/{id}/update", method = RequestMethod.GET)
    public String update(@PathVariable int id, Model model) {
	UserInfo u = new UserInfo();
	u.setId(id);
	model.addAttribute(userService.selectUserInfoId(u));
	return "userinfo/update";
    }

    @RequestMapping(value = "/{id}/update", method = RequestMethod.POST)
    public String update(@PathVariable int id, @Validated UserInfo userinfo, BindingResult br, Model model) {
	try {
	    userService.updateUser(userinfo);
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return "redirect:/user/list";
    }

    @RequestMapping(value = "/{id}/delete", method = RequestMethod.GET)
    public String delete(@PathVariable int id) {
	UserInfo userinfo = new UserInfo();
	userinfo.setId(id);
	try {
	    userService.deleteUser(userinfo);
	} catch (Exception e) {
	    e.printStackTrace();
	}
	return "redirect:/user/list";
    }
}
